import random


matrix = [[0, 5, 2, 3, 7, 5, 6, 9], [5, 0, 3, 2, 3, 4, 7, 6], [2, 3, 0, 1, 2, 30, 7, 5], [3, 2, 1, 0, 12, 2, 3, 8], [7, 3, 2, 12, 0, 3, 2, 3], [5, 7, 30, 2, 3, 0, 1, 2], [6, 7, 4, 3, 2, 1, 0, 1], [9, 6, 5, 8, 3, 2, 1, 0]]
idCidade=[0,1,2,3,4,5,6,7]

def valorPosicao(i, j):
    caminho=matrix[int(i)][int(j)]
    return caminho

#solution usign genetic programming
def geneticAlgorithm(population, fitness):
    best=''
    valueBest=999
    for x in fitness:
        valorAtual=fitness[x]
        if valorAtual<valueBest:
            valueBest=valorAtual
            best=x
        

    mutationProbability = 0.03
    newPopulation = []
    if random.random() < 0.001:
        newPopulation.append(best)

    populationSize = len(population)
    while len(newPopulation) < populationSize:
        #select two random individuals
        individual1 = random.choice(population)
        individual2 = random.choice(population)
        #crossover
        crossoverPoint = random.randint(1,6)
        offspring1 = individual1[0:crossoverPoint] #+ individual2[crossoverPoint:]
        offspring11=''
        offspring22=''
        for i in range(0, 8):
            gene=individual2[i]
            if offspring1.find(gene)==-1:
                offspring1+=gene
        
 
        offspring2 = individual2[0:crossoverPoint] #+ individual1[crossoverPoint:]

        for i in range(0, 8):
            gene=individual1[i]
            if offspring2.find(gene)==-1:
                offspring2+=gene
        #mutation
        if random.random() < mutationProbability:
            #mutationPoint = random.randint(0,7)
            #offspring1 = offspring1[0:mutationPoint] + str(random.randint(0,7)) + offspring1[mutationPoint+1:]

            geneA=random.randint(0, len(individual1)-2)
            # Aplicamos a chance
            while True:
                geneB = random.randint(0, len(individual1)-2)
                if geneB!=geneA: break
                      
            valorA=offspring1[geneA]
            valorB=offspring1[geneB]

            for i in range(0,7):
                if offspring1[i]==valorA:
                     offspring1+=valorB
                elif offspring1[i]==valorB:
                     offspring11+=valorA
                else:
                    offspring11+=offspring1[i]
 
        

        if random.random() < mutationProbability:
            #mutationPoint = random.randint(0,7)
            #offspring2 = offspring2[0:mutationPoint] + str(random.randint(0,7)) + offspring2[mutationPoint+1:]

            geneA=random.randint(0, len(individual2)-2)
            # Aplicamos a chance
            while True:
                geneB = random.randint(0, len(individual2)-2)
                if geneB!=geneA: break
            valorA=offspring2[geneA]
            valorB=offspring2[geneB]

            for i in range(0,7):
                if offspring2[i]==valorA:
                     offspring22+=valorB
                elif offspring2[i]==valorB:
                     offspring22+=valorA
                else:
                    offspring22+=offspring2[i]
 
        #add offspring to new population
        newPopulation.append(offspring1)
        newPopulation.append(offspring2)

    return newPopulation

#fitness function
def getFitness(population):
    fitness = {}
    for individual in population:
        #number of conflicts
        conflicts = 0
        cidadeInicial=individual[0]
        #for each pair of queens
    
        for i in range(0,7):
                #if there is a conflict
                posicaoI=individual[i]
              
                if (i==7):
                    posicaoJ=cidadeInicial
                else:
                    posicaoJ=individual[i+1]
                
                conflicts+=valorPosicao(posicaoI,posicaoJ)
        
             
        fitness[individual] = conflicts
    return fitness

#generate a random population
#individual are string of 8 numbers, 1 to 8
def generateRandomPopulation(populationSize):
    population = []
       
    for i in range(populationSize):
        individual = ''
        idAleatorios = random.sample(idCidade, len(idCidade))
        for i in range(0,len(idAleatorios)):
            individual = individual + str(idAleatorios[i])
        population.append(individual)  

    return population



#generate a random population
#individual are string of 8 numbers, 1 to 8
def generateRandomPopulation2(populationSize):
    population = []
    for i in range(populationSize):
        individual = ''
        for j in range(8):
            individual = individual + str(random.randint(1,8))
        population.append(individual)
    return population

#main

population = generateRandomPopulation(2000) # ['12312312','32132132',...]']
fitness = getFitness(population)
generation = 1
while min(fitness.values()) > 10:
    print ('Generation ' + str(generation) + ' - Fittest is ' + str(min(fitness.values())))
    population = geneticAlgorithm(population, fitness)
    fitness = getFitness(population)
    generation = generation + 1
print ('Solution found in generation ' + str(generation-1))
print ('Fitness: ' + str(min(fitness.values())))
for individual in fitness.keys():
    if fitness[individual] == 13:
        print ('Solution: ' + individual)
        #break
